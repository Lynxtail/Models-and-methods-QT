from math import exp, factorial
import numpy as np

N = 2
lmbd = 2
v = 0.5
mu = 1 / v

alpha = lmbd / mu
print(f'alpha: {alpha}')

def p_1(n):
    return ((alpha ** (n + 1) * sum([alpha ** i for i in range(N - n + 1)])) /
            (sum([alpha ** i for i in range(N + 1)]))) * p_0_0


def p_k(k):
    return (alpha ** (k + N) /
            (factorial(k) * sum([alpha ** i for i in range(N + 1)]))) * p_0_0


t_1 = sum([alpha ** (-i) for i in range(N + 1)])
t_2 = sum([(N - i + 1) * alpha ** (-i) for i in range(1, N + 1)])
p_1_0 = (alpha * t_1) / ((N + 1) * exp(alpha) + t_2)

p_0_0 = p_1_0 / alpha
print(f'Вероятность того, что у раздаточного окна инструментальной кладовой никого из рабочих нет, и дежурный \
кладовщик свободен от выдачи:  {p_0_0}')

p_1_1 = p_1(1)
p_1_2 = p_1(2)

p = [[p_1_0],
    [p_1_1],
    [p_1_2]]

for i in range(N + 1):
    for k in range(2, 8):
        p[i].append(p_k(k))

p = np.array(p)
p_k = [p.transpose()[k].sum() for k in range(7)]
print(f'\nВероятности того, что на раздаче инструмента будет занято 1,2,3,...,7 кладовщиков:\n')
for n in range(N+1):
    for k in range(7):
        print(f'p({k + 1}{n}) = {p_k[k]}')

# вероятности того, что очередь не будет превышать N человек при 
# условии, что на раздаче инструмента будет занято 1,2,3,...,7 кладовщиков
# \ p(1,0), p(2,0), p(3,0), p(4,0), p(5,0), p(6,0), p(7,0).
# \ p(1,1), p(2,1), p(3,1), p(4,1), p(5,1), p(6,1), p(7,1).
# \ p(1,2), p(2,2), p(3,2), p(4,2), p(5,2), p(6,2), p(7,2).
print('\nВероятности того, что очередь не будет превышать N человек при условии, что на раздаче инструмента будет \
занято 1,2,3,...,7 кладовщиков:\n')
p_N = [p_0_0] * 7
for n in range(N + 1):
    for k in range(7):
        p_N[k] += p[n][k]

[print(f"Вероятности того, что очередь не будет превышать 2 человек при условии, что на раздаче инструмента будет \
занято {k + 1} кладовщиков: {round(p_N[k], 4)}") for k in range(len(p_N))]

# среднее число занятых кладовщиков
# ИНДЕКС ЗА ПРЕДЕЛАМИ МАССИВА
h = sum([p_1(n) for n in range(N + 1)]) + \
     sum([k * sum([p_k[k] for _ in range(N + 1)]) for k in range(2, 100)])
print(f'М.о. числа занятых кладовщиков: {h}')

# среднее число рабочих, ожидающих в очереди
# \ b
b = sum([n * p_1(n) for n in range(N + 1)]) + \
     sum([sum([n * p_k(k) for n in range(N + 1)]) for k in range(2, 100)])
print(f'М.о. числа рабочих, ожидающих в очереди: {b}')

# среднее время пребывания рабочих в очереди в ожидании выдачи инструмента
# \ w = b / lmbd
w = b / lmbd
print(f'М.о. времени пребывания рабочих в очереди: {w}')

# среднее число кладовщиков с условием
a = 95 / 100
s = p_0_0
k = 0
while s < a:
    s += p_k[k]
    k += 1

print(f'В среднем необходимых {k} кладовщиков, чтобы обеспечить обслуживание рвбочих в заданных условиях с гарантийной веоятностью не ниже 0.95')